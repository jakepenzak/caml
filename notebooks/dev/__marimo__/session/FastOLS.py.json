{
  "version": "1",
  "metadata": {
    "marimo_version": "0.13.1"
  },
  "cells": [
    {
      "id": "Hbol",
      "code_hash": "1d0db38904205bec4d6f6f6a1f6cec3e",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": []
    },
    {
      "id": "MJUe",
      "code_hash": "616f4b28f8d4815df184d445a88e3a63",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<span class=\"markdown prose dark:prose-invert\"><h1 id=\"fastols-api-usage\">FastOLS API Usage</h1></span>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "vblA",
      "code_hash": "3e956a25de24f2dbf1ec10f35b30ef76",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": [
        {
          "type": "stream",
          "name": "stdout",
          "text": "[04/25/25 12:02:41] DEBUG    Logging configured with level: DEBUG                                                                                     logging.py:70\n"
        }
      ]
    },
    {
      "id": "bkHC",
      "code_hash": "1e2204d81f04d4957d94b945925dcb21",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": [
        {
          "type": "stream",
          "name": "stdout",
          "text": "                    WARNING  CamlSyntheticDataGenerator is experimental and may change in future versions.                                          _generics.py:41\n"
        }
      ]
    },
    {
      "id": "lEQa",
      "code_hash": "8bbd05c1ca4cf6a5b9b4910e7fe0fc45",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<marimo-ui-element object-id='lEQa-0' random-id='1caba67c-1b17-5391-7420-48328d32a787'><marimo-table data-initial-value='[]' data-label='null' data-data='&quot;./@file/1775-26020-YdZurFOm.json&quot;' data-total-rows='100000' data-total-columns='8' data-banner-text='&quot;&quot;' data-pagination='true' data-page-size='10' data-field-types='[[&quot;W1_continuous&quot;, [&quot;number&quot;, &quot;float64&quot;]], [&quot;X1_continuous&quot;, [&quot;number&quot;, &quot;float64&quot;]], [&quot;X2_binary&quot;, [&quot;integer&quot;, &quot;int64&quot;]], [&quot;X3_binary&quot;, [&quot;integer&quot;, &quot;int64&quot;]], [&quot;X4_discrete&quot;, [&quot;integer&quot;, &quot;int64&quot;]], [&quot;T1_binary&quot;, [&quot;integer&quot;, &quot;int64&quot;]], [&quot;Y1_continuous&quot;, [&quot;number&quot;, &quot;float64&quot;]], [&quot;Y2_continuous&quot;, [&quot;number&quot;, &quot;float64&quot;]]]' data-show-filters='true' data-show-download='true' data-show-column-summaries='true' data-row-headers='[]' data-has-stable-row-id='false' data-lazy='false' data-preload='false'></marimo-table></marimo-ui-element>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "PKri",
      "code_hash": "8333e6d4fb13a5e8e229062383b20237",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/html": "<span class=\"markdown prose dark:prose-invert\"><h2 id=\"fit-w-effect-estimation-in-one-pass\">Fit w/ Effect Estimation in One Pass</h2></span>"
          }
        }
      ],
      "console": []
    },
    {
      "id": "Xref",
      "code_hash": "8f9b6689fd44aaf9a2ae24d9ddbd670e",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": [
        {
          "type": "stream",
          "name": "stdout",
          "text": "                    WARNING  FastOLS is experimental and may change in future versions.                                                             _generics.py:41\n                    DEBUG    Initializing FastOLS with parameters: Y=['Y1_continuous', 'Y2_continuous'], T=T1_binary, G=['X2_binary', 'X3_binary',       ols.py:139\n                             'X4_discrete'], X=['X1_continuous'], W=['W1_continuous'], discrete_treatment=True, engine=cpu                                         \n                    DEBUG    Created formula: Y1_continuous + Y2_continuous ~ C(T1_binary) + C(X2_binary)*C(T1_binary) + C(X3_binary)*C(T1_binary) +     ols.py:169\n                             C(X4_discrete)*C(T1_binary) + X1_continuous*C(T1_binary) + W1_continuous                                                              \n"
        }
      ]
    },
    {
      "id": "SFPL",
      "code_hash": "523c5c0f09c2ec95cea11e083ba5880a",
      "outputs": [],
      "console": []
    },
    {
      "id": "BYtC",
      "code_hash": "b44bb118b90c1db3ed8743d2dfa4ce45",
      "outputs": [],
      "console": []
    },
    {
      "id": "RGSE",
      "code_hash": "5c0f1f02837f2ee178b0986f0d643563",
      "outputs": [],
      "console": []
    },
    {
      "id": "Kclp",
      "code_hash": "d8f17db86b490d378ec1c0d87aa061d8",
      "outputs": [],
      "console": []
    },
    {
      "id": "emfo",
      "code_hash": "156bb8200d8f821b7db1641c4f38454b",
      "outputs": [],
      "console": []
    },
    {
      "id": "Hstk",
      "code_hash": "231392380998c8ce1175522f08ad7744",
      "outputs": [],
      "console": []
    },
    {
      "id": "nWHF",
      "code_hash": "53e61336bb49ec978968786b07dea50b",
      "outputs": [],
      "console": []
    },
    {
      "id": "iLit",
      "code_hash": "2d46a4cccb19111f247b6b8090699b87",
      "outputs": [],
      "console": []
    },
    {
      "id": "ZHCJ",
      "code_hash": "7f6a792d8af863d4bbc2147c292c9e6f",
      "outputs": [],
      "console": []
    },
    {
      "id": "ROlb",
      "code_hash": "46d9dfeca5bddff0e966605a73687869",
      "outputs": [],
      "console": []
    },
    {
      "id": "qnkX",
      "code_hash": "f14573f167e4794995052af3a08fff41",
      "outputs": [],
      "console": []
    },
    {
      "id": "TqIu",
      "code_hash": "e159d1fa333605a84377977b951f46c0",
      "outputs": [],
      "console": []
    },
    {
      "id": "Vxnm",
      "code_hash": "7d620a586511c3f38a8774478379cccd",
      "outputs": [],
      "console": []
    },
    {
      "id": "DnEU",
      "code_hash": null,
      "outputs": [],
      "console": []
    },
    {
      "id": "xzeN",
      "code_hash": "b78aec42248cdffa235c0ea06a068734",
      "outputs": [
        {
          "type": "data",
          "data": {
            "text/plain": ""
          }
        }
      ],
      "console": [
        {
          "type": "stream",
          "name": "stdout",
          "text": "Help on function FastOLS in module caml.traditional.ols:\n\nFastOLS(Y: Collection[str], T: str, G: Optional[Collection[str]] = None, X: Optional[Collection[str]] = None, W: Optional[Collection[str]] = None, *, discrete_treatment: bool = False, engine: str = 'cpu')\n    FastOLS is a fast implementation of the OLS estimator designed specifically with treatment effect estimation in mind.\n    \n    **FastOLS is experimental and may change significantly in future versions.**\n    \n    This estimator estimates a standard linear regression model for any number of continuous or binary outcomes and a single continuous or binary treatment,\n    and provides estimates for the Average Treatment Effects (ATEs) and Group Average Treatment Effects (GATEs) out of the box. Additionally,\n    methods are provided for estimating & predicting Conditional Average Treatment Effects (CATEs) of individual observations. Custom GATEs\n    can also be estimated ad hoc.\n    \n    This class leverages JAX for fast numerical computations, which can be installed using `pip install caml[jax]`, defaulting to NumPy if JAX is not\n    available. For GPU acceleration, install JAX with GPU support using `pip install caml[jax-gpu]`.\n    \n    For outcome/treatment support, see [matrix](support_matrix.qmd).\n    \n    ## Model Specification\n    \n    The model is given by:\n    $$\n    \\begin{equation}\n    \\mathbf{Y} = T \\beta + \\mathbf{Q}\\mathbf{\\Gamma} + \\left(T \\times \\mathbf{Q}\\right)\\mathbf{\\Omega} + \\mathbf{W}\\mathbf{\\Psi} + \\mathbf{E}\n    \\tag{1}\n    \\end{equation}\n    $$\n    \n    where $\\mathbf{Y}_{n \\times p}$ is the matrix of $p$ outcomes, $T_{n \\times 1}$ is the treatment variable,\n    $\\mathbf{Q}_{n \\times (j+l)} = \\bigl[\\mathbf{X} \\; \\mathbf{G} \\bigr]$ is the horizontal stack matrix of $j$ covariates and $l$ group variables,\n    $\\mathbf{W}_{n \\times m}$ is the matrix of $m$ control covariates, $\\beta_{1 \\times p}$ is the vector of coefficients on $T$,\n    $\\mathbf{\\Gamma}_{(j+l) \\times p}$ is the matrix of coefficients on $\\mathbf{Q}$, $\\mathbf{\\Omega}_{(j+l) \\times p}$ is the matrix\n    of coefficients on the interaction terms between $T$ and $\\mathbf{Q}$, $\\mathbf{\\Psi}_{m \\times p}$ is the matrix of\n    coefficients on $\\mathbf{W}$, and $\\mathbf{E}_{n \\times p}$ is the error term matrix.\n    \n    $\\mathbf{Q}$ contains the covariates and group variables used to model treatment effect heterogeneity via interaction terms.\n    \n    ### Treatment Effect Estimation & Inference\n    Our average treatment effect (ATE) $\\tau$ is defined as:\n    \n    $$\n    \\tau = \\mathbb{E}_n\\left[\\mathbb{E}\\left[\\mathbf{Y} \\mid T = 1\\right] - \\mathbb{E}\\left[\\mathbf{Y} \\mid T = 0\\right]\\right]\n    $$\n    \n    Let $D$ denote the design matrix for (1), then assuming exogeneity in $T$, the ATEs are identified and can be estimated as follows:\n    $$\n    \\tau = \\mathbf{\\Theta'}\\bar{d}\n    $$\n    \n    where $\\mathbf{\\Theta'} = \\left[\\beta' \\; \\mathbf{\\Gamma'} \\; \\mathbf{\\Omega'} \\; \\mathbf{\\Psi'}\\right]$ is\n    the $\\left(p \\times (1+(j+l)+(j+l)+m)\\right)$ horizontally concatenated matrix of transposed coefficient matrices, and\n    $\\bar{d} = \\mathbb{E}_n\\left[D_{T=1} - D_{T=0}\\right]$ is a $((1+(j+l)+(j+l)+m) \\times 1)$ vector.\n    \n    Furthermore, for each outcome $k \\in \\{1,2,...,p\\}$, we can estimate the standard error of the ATE as follows:\n    $$\n    \\text{SE}(\\tau_k) = \\sqrt{\\bar{d}'\\text{VCV}(\\mathbf{\\Theta}_k)\\bar{d}}\n    $$\n    \n    where $\\text{VCV}(\\mathbf{\\Theta}_k)$ is the variance-covariance matrix of the estimated coefficients for the $k$-th outcome.\n    \n    \n    Parameters\n    ----------\n    Y : Collection[str]\n        A list of outcome variable names.\n    T : str\n        The treatment variable name.\n    G : Collection[str] | None\n        A list of group variable names, by default None. These will be the groups for which GATEs will be estimated.\n    X : Collection[str] | None\n        A list of covariate variable names, by default None. These will be the covariates for which heterogeneity/CATEs can be estimated.\n    W : Collection[str] | None\n        A list of additional covariate variable names to be used as controls, by default None. These will be the additional covariates not used for modeling heterogeneity/CATEs.\n    discrete_treatment : bool\n        Whether the treatment is discrete, by default False\n    engine : str\n        The engine to use for computation, by default \"cpu\". Can be \"cpu\" or \"gpu\". Note \"gpu\" requires JAX to be installed, which can be installed\n        via `pip install caml[jax-gpu]`.\n    \n    Attributes\n    ----------\n    Y : Collection[str]\n        A list of outcome variable names.\n    T : str\n        The treatment variable name.\n    G : Collection[str] | None\n        The list of group variable names, by default None. These will be the groups for which GATEs will be estimated.\n    X : Collection[str] | None\n        The list of variable names representing the confounder/control feature set to be utilized for estimating heterogeneity/CATEs, that are in addition to G.\n    W : Collection[str] | None\n        The list of variable names representing the confounder/control feature **not** utilized for estimating heterogeneity/CATEs.\n    discrete_treatment : bool\n        Whether the treatment is discrete, by default True\n    engine : str\n        The engine to use for computation, by default \"cpu\". Can be \"cpu\" or \"gpu\". Note \"gpu\" requires JAX to be installed, which can be installed\n        via `pip install caml[jax-gpu]`\n    formula : str\n        The formula leveraged for design matrix creation via Patsy.\n    results : dict\n        A dictionary containing the results of the fitted model & estimated ATEs/GATEs.\n\n"
        }
      ]
    }
  ]
}
