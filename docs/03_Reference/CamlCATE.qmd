# CamlCATE { #caml.CamlCATE }

`CamlCATE(self, df, Y, T, X=[], W=[], *, uuid=None, discrete_treatment=True, discrete_outcome=False, seed=None)`

The CamlCATE class represents an opinionated implementation of Causal Machine Learning techniques for estimating
highly accurate conditional average treatment effects (CATEs). 

This class is built on top of the EconML library and provides a high-level API for fitting, validating, and making inference with CATE models,
with best practices built directly into the API. The class is designed to be easy to use and understand, while still providing
flexibility for advanced users. The class is designed to be used with the `pandas`, `polars`, `pyspark`, and `ibis` backends to
provide a level of extensibility & interoperability across different data processing frameworks.

The primary workflow for the CamlCATE class is as follows:

1. Initialize the class with the input DataFrame and the necessary columns.
2. Utilize AutoML to find the optimal nuisance functions to be utilized in the EconML estimators.
3. Fit the CATE models on the training set and evaluate based on the validation set, then select the top performer/ensemble.
4. Validate the fitted CATE model on the test set to check for generalization performance.
5. Fit the final estimator on the entire dataset, after validation and testing.
6. Predict the CATE based on the fitted final estimator for either the internal dataframe or an out-of-sample dataframe.
7. Rank orders households based on the predicted CATE values for either the internal dataframe or an out-of-sample dataframe.
8. Summarize population summary statistics for the CATE predictions for either the internal dataframe or an out-of-sample dataframe.


For technical details on conditional average treatment effects, see:

 - CaML Documentation
 - [EconML documentation](https://econml.azurewebsites.net/)

 **Note**: All the standard assumptions of Causal Inference apply to this class (e.g., exogeneity/unconfoundedness, overlap, positivity, etc.). 
    The class does not check for these assumptions and assumes that the user has already thought through these assumptions before using the class.

## Parameters

| Name                 | Type                                                                                   | Description                                                                                                                         | Default    |
|----------------------|----------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------|------------|
| `df`                 | pandas.DataFrame \| polars.DataFrame \| pyspark.sql.DataFrame \| ibis.expr.types.Table | The input DataFrame representing the data for the EchoCATE instance.                                                                | _required_ |
| `Y`                  | str                                                                                    | The str representing the column name for the outcome variable.                                                                      | _required_ |
| `T`                  | str                                                                                    | The str representing the column name(s) for the treatment variable(s).                                                              | _required_ |
| `X`                  | list\[str\] \| str \| None                                                             | The str (if unity) or list of feature names representing the heterogeneity feature set. Defaults to None.                           | `[]`       |
| `W`                  | list\[str\] \| str \| None                                                             | The str (if unity) or list of feature names representing the confounder feature set. Defaults to None.                              | `[]`       |
| `uuid`               | str \| None                                                                            | The str representing the column name for the universal identifier code (eg, ehhn). Defaults to None, which implies index for joins. | `None`     |
| `discrete_treatment` | bool                                                                                   | A boolean indicating whether the treatment is discrete or continuous. Defaults to True.                                             | `True`     |
| `discrete_outcome`   | bool                                                                                   | A boolean indicating whether the outcome is discrete or continuous. Defaults to False.                                              | `False`    |
| `seed`               | int \| None                                                                            | The seed to use for the random number generator. Defaults to None.                                                                  | `None`     |

## Attributes

| Name                  | Type                                                                                   | Description                                                                                                                          |
|-----------------------|----------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------|
| df                    | pandas.DataFrame \| polars.DataFrame \| pyspark.sql.DataFrame \| ibis.expr.types.Table | The input DataFrame representing the data for the CamlCATE instance.                                                                 |
| Y                     | str                                                                                    | The str representing the column name for the outcome variable.                                                                       |
| T                     | str                                                                                    | The str representing the column name(s) for the treatment variable(s).                                                               |
| X                     | list\[str\] \| str \| None                                                             | The str (if unity) or list/tuple of feature names representing the heterogeneity feature set.                                        |
| W                     | list\[str\] \| str \| None                                                             | The str (if unity) or list/tuple of feature names representing the confounder feature set. Only used for fitting nuisance functions. |
| uuid                  | str                                                                                    | The str representing the column name for the universal identifier code (eg, ehhn)                                                    |
| discrete_treatment    | bool                                                                                   | A boolean indicating whether the treatment is discrete or continuous.                                                                |
| validation_estimator  | econml._cate_estimator.BaseCateEstimator \| econml.score.EnsembleCateEstimator         | The fitted EconML estimator object for validation.                                                                                   |
| final_estimator       | econml._cate_estimator.BaseCateEstimator \| econml.score.EnsembleCateEstimator         | The fitted EconML estimator object on the entire dataset after validation.                                                           |
| dataframe             | pandas.DataFrame \| polars.DataFrame \| pyspark.sql.DataFrame \| ibis.expr.types.Table | The input DataFrame with any modifications (e.g., predictions or rank orderings) made by the class returned to the original backend. |
| _ibis_connection      | ibis.client.Client                                                                     | The Ibis client object representing the backend connection to Ibis.                                                                  |
| _ibis_df              | ibis.expr.types.Table                                                                  | The Ibis table expression representing the DataFrame connected to Ibis.                                                              |
| _table_name           | str                                                                                    | The name of the temporary table/view created for the DataFrame in the backend.                                                       |
| _spark                | pyspark.sql.SparkSession                                                               | The Spark session object if the DataFrame is a Spark DataFrame.                                                                      |
| _Y                    | ibis.expr.types.Table                                                                  | The outcome variable data as ibis table.                                                                                             |
| _T                    | ibis.expr.types.Table                                                                  | The treatment variable data as ibis table.                                                                                           |
| _X                    | ibis.expr.types.Table                                                                  | The feature set data as ibis table.                                                                                                  |
| _W                    | ibis.expr.types.Table                                                                  | The confounder feature set data as ibis table.                                                                                       |
| _X_W                  | ibis.expr.types.Table                                                                  | The feature set and confounder feature set data as ibis table.                                                                       |
| _X_W_T                | ibis.expr.types.Table                                                                  | The feature set, confounder feature set, and treatment variable data as ibis table.                                                  |
| _nuisances_fitted     | bool                                                                                   | A boolean indicating whether the nuisance functions have been fitted.                                                                |
| _validation_estimator | econml._cate_estimator.BaseCateEstimator \| econml.score.EnsembleCateEstimator         | The fitted EconML estimator object for validation.                                                                                   |
| _final_estimator      | econml._cate_estimator.BaseCateEstimator \| econml.score.EnsembleCateEstimator         | The fitted EconML estimator object for final predictions.                                                                            |
| _validator_results    | econml.validate.EvaluationResults                                                      | The results of the validation tests from DRTester.                                                                                   |
| _cate_models          | list\[tuple\[str, econml._cate_estimator.BaseCateEstimator\]\]                         | The list of CATE models to fit and ensemble.                                                                                         |
| _model_Y_X_W          | sklearn.base.BaseEstimator                                                             | The fitted nuisance function for the outcome variable.                                                                               |
| _model_Y_X_W_T        | sklearn.base.BaseEstimator                                                             | The fitted nuisance function for the outcome variable with treatment variable.                                                       |
| _model_T_X_W          | sklearn.base.BaseEstimator                                                             | The fitted nuisance function for the treatment variable.                                                                             |
| _data_splits          | dict\[str, np.ndarray\]                                                                | The dictionary containing the training, validation, and test data splits.                                                            |
| _rscorer              | econml.score.RScorer                                                                   | The RScorer object for the validation estimator.                                                                                     |

## Examples

```python
>>> from caml.core.cate import CamlCATE
>>> from caml.extensions.synthetic_data import make_fully_heterogeneous_dataset
>>> df, true_cates, true_ate = make_fully_heterogeneous_dataset(n_obs=1000, n_confounders=10, ate=10, seed=1)
>>> df['uuid'] = df.index
>>>  caml_obj= CamlCATE(df=df, Y="y", T="d", X=[c for c in df.columns if "X" in c], W=[c for c in df.columns if "W" in c], uuid="uuid", discrete_treatment=True, discrete_outcome=False, seed=1)
>>> 
>>> # Standard pipeline
>>> caml_obj.auto_nuisance_functions()
>>> caml_obj.fit_validator()
>>> caml_obj.validate(print_full_report=True)
>>> caml_obj.fit_final()
>>> caml_obj.predict(join_predictions=True)
>>> caml_obj.rank_order(join_rank_order=True)
>>> caml_obj.summarize()
>>> 
>>> end_of_pipeline_results = caml_obj.dataframe
```

## Methods

| Name | Description |
| --- | --- |
| [auto_nuisance_functions](#caml.CamlCATE.auto_nuisance_functions) | Automatically finds the optimal nuisance functions for estimating EconML estimators. |
| [fit_final](#caml.CamlCATE.fit_final) | Fits the final estimator on the entire dataset, after validation and testing. |
| [fit_validator](#caml.CamlCATE.fit_validator) | Fits the CATE models on the training set and evaluates them & ensembles based on the validation set. |
| [predict](#caml.CamlCATE.predict) | Predicts the CATE based on the fitted final estimator for either the internal dataframe or an out-of-sample dataframe. |
| [rank_order](#caml.CamlCATE.rank_order) | Ranks orders households based on the predicted CATE values for either the internal dataframe or an out-of-sample dataframe. |
| [summarize](#caml.CamlCATE.summarize) | Provides population summary statistics for the CATE predictions for either the internal dataframe or an out-of-sample dataframe. |
| [validate](#caml.CamlCATE.validate) | Validates the fitted CATE models on the test set to check for generalization performance. Uses the DRTester class from EconML to obtain the Best  |

### auto_nuisance_functions { #caml.CamlCATE.auto_nuisance_functions }

`CamlCATE.auto_nuisance_functions(flaml_Y_kwargs=None, flaml_T_kwargs=None, use_ray=False, use_spark=False)`

Automatically finds the optimal nuisance functions for estimating EconML estimators.

Sets the `_model_Y_X_W`, `_model_Y_X_W_T`, and `_model_T_X_W` internal attributes to the fitted nuisance functions.

#### Parameters

| Name             | Type         | Description                                                                                                                     | Default   |
|------------------|--------------|---------------------------------------------------------------------------------------------------------------------------------|-----------|
| `flaml_Y_kwargs` | dict \| None | The keyword arguments for the FLAML AutoML search for the outcome model. Defaults to None, which implies the base parameters.   | `None`    |
| `flaml_T_kwargs` | dict \| None | The keyword arguments for the FLAML AutoML search for the treatment model. Defaults to None, which implies the base parameters. | `None`    |
| `use_ray`        | bool         | A boolean indicating whether to use Ray for parallel processing. Defaults to False.                                             | `False`   |
| `use_spark`      | bool         | A boolean indicating whether to use Spark for parallel processing. Defaults to False.                                           | `False`   |

#### Examples

```python
>>> flaml_Y_kwargs = {
...     "n_jobs": -1,
...     "time_budget": 300, # in seconds
...     }
>>> flaml_T_kwargs = {
...     "n_jobs": -1,
...     "time_budget": 300,
...     }
>>> caml_obj.auto_nuisance_functions(flaml_Y_kwargs=flaml_Y_kwargs, flaml_T_kwargs=flaml_T_kwargs)
```

### fit_final { #caml.CamlCATE.fit_final }

`CamlCATE.fit_final()`

Fits the final estimator on the entire dataset, after validation and testing.

Sets the `_final_estimator` internal attribute to the fitted EconML estimator.

#### Examples

```python
>>> caml_obj.fit_final() # Fits the final estimator on the entire dataset.
```

### fit_validator { #caml.CamlCATE.fit_validator }

`CamlCATE.fit_validator(subset_cate_models=['LinearDML', 'NonParamDML', 'DML-Lasso3d', 'CausalForestDML', 'XLearner', 'DomainAdaptationLearner', 'SLearner', 'TLearner', 'DRLearner'], rscorer_kwargs={}, use_ray=False, ray_remote_func_options_kwargs={})`

Fits the CATE models on the training set and evaluates them & ensembles based on the validation set.

Sets the `_validation_estimator` and `_rscorer` internal attributes to the fitted EconML estimator and RScorer object.

#### Parameters

| Name                             | Type        | Description                                                                                 | Default                                                                                                                                      |
|----------------------------------|-------------|---------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------|
| `subset_cate_models`             | list\[str\] | The list of CATE models to fit and ensemble. Defaults to all available models.              | `['LinearDML', 'NonParamDML', 'DML-Lasso3d', 'CausalForestDML', 'XLearner', 'DomainAdaptationLearner', 'SLearner', 'TLearner', 'DRLearner']` |
| `rscorer_kwargs`                 | dict        | The keyword arguments for the econml.score.RScorer object. Defaults to an empty dictionary. | `{}`                                                                                                                                         |
| `use_ray`                        | bool        | A boolean indicating whether to use Ray for parallel processing. Defaults to False.         | `False`                                                                                                                                      |
| `ray_remote_func_options_kwargs` | dict        | The keyword arguments for the Ray remote function options. Defaults to an empty dictionary. | `{}`                                                                                                                                         |

#### Examples

```python
>>> rscorer_kwargs = {
...     "cv": 3,
...     "mc_iters": 3,
...     }
>>> caml_obj.fit_validator(rscorer_kwargs=rscorer_kwargs)
```

### predict { #caml.CamlCATE.predict }

`CamlCATE.predict(out_of_sample_df=None, out_of_sample_uuid=None, return_predictions=False, join_predictions=True)`

Predicts the CATE based on the fitted final estimator for either the internal dataframe or an out-of-sample dataframe.

#### Parameters

| Name                 | Type                                                                                           | Description                                                                                                           | Default   |
|----------------------|------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------|-----------|
| `out_of_sample_df`   | pandas.DataFrame \| polars.DataFrame \| pyspark.sql.DataFrame \| ibis.expr.types.Table \| None | The out-of-sample DataFrame to make predictions on. Defaults to None.                                                 | `None`    |
| `out_of_sample_uuid` | str \| None                                                                                    | The column name for the universal identifier code (eg, ehhn) in the out-of-sample DataFrame. Defaults to None.        | `None`    |
| `return_predictions` | bool                                                                                           | A boolean indicating whether to return the predicted CATE. Defaults to False.                                         | `False`   |
| `join_predictions`   | bool                                                                                           | A boolean indicating whether to join the predicted CATE to the original DataFrame within the class. Defaults to True. | `True`    |

#### Returns

| Type       | Description                                                     |
|------------|-----------------------------------------------------------------|
| np.ndarray | The predicted CATE values if return_predictions is set to True. |

#### Examples

```python
>>> caml.predict(join_predictions=True) # Joins the predicted CATE values to the original DataFrame.
>>> caml.dataframe # Returns the DataFrame to original backend with the predicted CATE values joined.
```

### rank_order { #caml.CamlCATE.rank_order }

`CamlCATE.rank_order(out_of_sample_df=None, return_rank_order=False, join_rank_order=True)`

Ranks orders households based on the predicted CATE values for either the internal dataframe or an out-of-sample dataframe.

#### Parameters

| Name                | Type                                                                                           | Description                                                                                                          | Default   |
|---------------------|------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------|-----------|
| `out_of_sample_df`  | pandas.DataFrame \| polars.DataFrame \| pyspark.sql.DataFrame \| ibis.expr.types.Table \| None | The out-of-sample DataFrame to rank order. Defaults to None.                                                         | `None`    |
| `return_rank_order` | bool                                                                                           | A boolean indicating whether to return the rank ordering. Defaults to False.                                         | `False`   |
| `join_rank_order`   | bool                                                                                           | A boolean indicating whether to join the rank ordering to the original DataFrame within the class. Defaults to True. | `True`    |

#### Returns

| Type       | Description                                                   |
|------------|---------------------------------------------------------------|
| np.ndarray | The rank ordering values if return_rank_order is set to True. |

#### Examples

```python
>>> caml.rank_order(join_rank_order=True) # Joins the rank ordering to the original DataFrame.
>>> caml.dataframe # Returns the DataFrame to original backend with the rank ordering values joined.
```

### summarize { #caml.CamlCATE.summarize }

`CamlCATE.summarize(out_of_sample_df=None)`

Provides population summary statistics for the CATE predictions for either the internal dataframe or an out-of-sample dataframe.

#### Parameters

| Name               | Type                                                                                           | Description                                                 | Default   |
|--------------------|------------------------------------------------------------------------------------------------|-------------------------------------------------------------|-----------|
| `out_of_sample_df` | pandas.DataFrame \| polars.DataFrame \| pyspark.sql.DataFrame \| ibis.expr.types.Table \| None | The out-of-sample DataFrame to summarize. Defaults to None. | `None`    |

#### Returns

| Type                                                                                   | Description                                      |
|----------------------------------------------------------------------------------------|--------------------------------------------------|
| pandas.DataFrame \| polars.DataFrame \| pyspark.sql.DataFrame \| ibis.expr.types.Table | The summary statistics for the CATE predictions. |

#### Examples

```python
>>> caml.summarize() # Summarizes the CATE predictions for the internal DataFrame.
```

### validate { #caml.CamlCATE.validate }

`CamlCATE.validate(estimator=None, print_full_report=True)`

Validates the fitted CATE models on the test set to check for generalization performance. Uses the DRTester class from EconML to obtain the Best 
Linear Predictor (BLP), Calibration, AUTOC, and QINI. See [EconML documentation](https://econml.azurewebsites.net/_autosummary/econml.validate.DRTester.html) for more details.
In short, we are checking for the ability of the model to find statistically significant heterogeneity in a "well-calibrated" fashion.

Sets the `_validator_results` internal attribute to the results of the DRTester class.

#### Parameters

| Name                | Type                                               | Description                                                                                            | Default   |
|---------------------|----------------------------------------------------|--------------------------------------------------------------------------------------------------------|-----------|
| `estimator`         | BaseCateEstimator \| EnsembleCateEstimator \| None | The estimator to validate. Defaults to None, which implies the best estimator from the validation set. | `None`    |
| `print_full_report` | bool                                               | A boolean indicating whether to print the full validation report. Defaults to True.                    | `True`    |

#### Returns

| Type                              | Description                                     |
|-----------------------------------|-------------------------------------------------|
| econml.validate.EvaluationResults | The evaluation results from the DRTester class. |

#### Examples

```python
>>> caml_obj.validate(print_full_report=True) # Prints the full validation report.
```